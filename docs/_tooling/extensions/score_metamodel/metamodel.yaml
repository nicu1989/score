# yaml-language-server: $schema=./metamodel-schema.json


needs_types:

  ##############################################################################
  # Process Metamodel
  ##############################################################################
  # Standards
  std_req:
    title: "Standard Requirement"
    prefix: "STD_REQ__"
    mandatory_options:
      opt_id: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__[0-9a-z_]*$"
      opt_status: "^(valid)$"

  std_wp:
    title: "Standard Work Product"
    prefix: "STD_WP__"
    mandatory_options:
      opt_id: "^(STD_WP_ISO26262|STD_WP_ISO21434|STD_(G|B)P_ASPICE-40)__[0-9a-z_]*$"
      opt_status: "^(valid)$"
  # Workflow
  workflow:
    title: "Workflow"
    prefix: "WF__"
    mandatory_options:
      opt_id: "^WF__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      input: "^WP__.*$"
      output: "^WP__.*$"
      contains: "^GD_(REQ|TEMP|CHKLST|GUIDL|METH)__.*$"
      has: "^DOC_(GETSTRT|CONCEPT)__.*$"
      approved_by: "^RL__.*$"
      responsible: "^RL__.*$"
    optional_links:
      supported_by: "^RL__.*$"
  # Guidances
  gd_req:
    title: "Process Requirements"
    prefix: "GD_REQ__"
    mandatory_options:
      opt_id: "^GD_REQ__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__.*$"

  gd_temp:
    title: "Process Template"
    prefix: "GD_TEMP__"
    mandatory_options:
      opt_id: "^GD_TEMP__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__.*$"

  gd_chklst:
    title: "Process Checklist"
    prefix: "GD_CHKLST__"
    mandatory_options:
      opt_id: "^GD_CHKLST__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__[0-9a-z_]*$"

  gd_guidl:
    title: "Process Guideline"
    prefix: "GD_GUIDL__"
    mandatory_options:
      opt_id: "^GD_GUIDL__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__.*$"

  gd_method:
    title: "Process Method"
    prefix: "GD_METH__"
    mandatory_options:
      opt_id: "^GD_METH__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_REQ_ISO26262|STD_REQ_ISO21434|STD_(G|B)P_ASPICE-40)__.*$"
  # Score Workproduct
  workproduct:
    title: "Workproduct"
    prefix: "WP__"
    mandatory_options:
      opt_id: "^WP__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"
    mandatory_links:
      complies: "^(STD_WP_ISO26262|STD_WP_ISO21434|STD_IIC_ASPICE-40)__.*$"
  # Role
  role:
    title: "Role"
    prefix: "RL__"
    mandatory_options:
      opt_id: "^RL__[0-9a-z_]*$"
    optional_links:
      contains: "^RL__.*$"
  # Documents
  doc_concept:
    title: "Concept Definition"
    prefix: "DOC_CONCEPT__"
    mandatory_options:
      opt_id: "^DOC_CONCEPT__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"

  doc_getstrt:
    title: "Getting Startet"
    prefix: "DOC_GETSTRT__"
    mandatory_options:
      opt_id: "^DOC_GETSTRT__[0-9a-z_]*$"
      opt_status: "^(valid|draft)$"

  ##############################################################################
  # Score Metamodel
  ##############################################################################
  # General
  document:
    title: "Generic Document"
    prefix: "DOC__"
    mandatory_options:
      opt_id: "^DOC__[0-9a-z_]*$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
  # Requirements
  stkh_req:
    title: "Stakeholder Requirement"
    prefix: "STKH_REQ__"
    mandatory_options:
      opt_id: "^STKH_REQ__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
      rationale: "^.+$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  feat_req:
    title: "Feature Requirement"
    prefix: "FEAT_REQ__"
    style: "node"
    mandatory_options:
      opt_id: "^FEAT_REQ__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^STKH_REQ__.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  comp_req:
    title: "Component Requirement"
    prefix: "COMP_REQ__"
    mandatory_options:
      opt_id: "^COMP_REQ__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^FEAT_REQ__.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  tool_req:
    title: "Tool Requirement"
    prefix: "TOOL_REQ__"
    mandatory_options:
      opt_id: "^TOOL_REQ__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^GD_.*$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"

  aou_req:
    title: "Assumption of Use"
    prefix: "AOU_REQ__"
    mandatory_options:
      opt_id: "^AOU_REQ__[0-9a-z_]*$"
      reqtype: "^(Functional|Interface|Process|Legal|Non-Functional)$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    optional_options:
      codelink: "^.*$"
      testlink: "^.*$"
      reqcovered: "^(YES|NO)$"
      testcovered: "^(YES|NO)$"
      hash: "^.*$"
  # Architecture
  feat_arc_sta:
    title: "Feature Architecture Static View"
    prefix: "FEAT_ARC_STA__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^FEAT_ARC_STA__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^FEAT_REQ__.*$"

  feat_arc_dyn:
    title: "Feature Architecture Dynamic View"
    prefix: "FEAT_ARC_DYN__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^FEAT_ARC_DYN__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^FEAT_REQ__.*$"

  feat_arc_int:
    title: "Feature Architecture Interfaces"
    prefix: "FEAT_ARC_INT__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^FEAT_ARC_INT__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^FEAT_REQ__.*$"

  feat_arc_int_op:
    title: "Feature Architecture Interface Operation"
    prefix: "FEAT_ARC_INT_OP__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      # Original code uses ^FEAT_ARC_INT_OP__, but actually typed ^COMP_ARC_INT__ in comp_arc_int_op.
      # This might be an original mismatch, but we'll keep it consistent with the Python code:
      opt_id: "^FEAT_ARC_INT_OP__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
      # no mandatory_links in the old code (commented out lines omitted)

  mod_arc_sta:
    title: "Module Architecture Static View"
    prefix: "MOD_ARC_STA__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^MOD_ARC_STA__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"

  comp_arc_sta:
    title: "Component Architecture Static View"
    prefix: "COMP_ARC_STA__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^COMP_ARC_STA__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^COMP_REQ__.*$"

  comp_arc_dyn:
    title: "Component Architecture Dynamic View"
    prefix: "COMP_ARC_DYN__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^COMP_ARC_DYN__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^COMP_REQ__.*$"

  comp_arc_int:
    title: "Component Architecture Interfaces"
    prefix: "COMP_ARC_INT__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      opt_id: "^COMP_ARC_INT__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^COMP_REQ__.*$"

  comp_arc_int_op:
    title: "Component Architecture Interface Operation"
    prefix: "COMP_ARC_INT_OP__"
    color: "#FEDCD2"
    style: "card"
    mandatory_options:
      # Original code says opt_id: "^COMP_ARC_INT__[0-9a-z_]*$", so we keep it as is:
      opt_id: "^COMP_ARC_INT__[0-9a-z_]*$"
      security: "^(YES|NO)$"
      safety: "^(QM|ASIL_B|ASIL_D)$"
      opt_status: "^(valid|invalid)$"
    mandatory_links:
      satisfies: "^COMP_REQ__.*$"

# Extra link types, which shall be available and allow need types to be linked to each other.
# We use a dedicated linked type for each type of a conncetion, for instance from
# a specification to a requirement. This makes filtering and visualization of such connections
# much easier, as we can sure the target need of a link has always a specific type.
# Docs: https://sphinx-needs.readthedocs.io/en/latest/configuration.html#needs-extra-links
needs_extra_links:
  ##############################################################
  #  Process Metamodel
  ##############################################################
  # Workflow
  contains:
    incoming: "contains"
    outgoing: "is contained by"

  has:
    incoming: "has"
    outgoing: "relates to"

  input:
    incoming: "needs input"
    outgoing: "is input to"

  output:
    incoming: "outputs"
    outgoing: "is output from"

  # Roles
  responsible:
    incoming: "is responsible for"
    outgoing: "responsible"

  approved_by:
    incoming: "approved by"
    outgoing: "approves"

  supported_by:
    incoming: "supported by"
    outgoing: "supports"

  # Workproduct
  complies:
    incoming: "complies"
    outgoing: "complies to"

  ##############################################################
  #  Score Metamodel
  ##############################################################
  # Requirements
  satisfies:
    incoming: "is satisfied by"
    outgoing: "satisfies"

  # Architecture
  implements:
    incoming: "implements by"
    outgoing: "implements"
